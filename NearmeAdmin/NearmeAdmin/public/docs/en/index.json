[
{
	"uri": "https://nearmev4.quanlabs.com/docs/en/admin-portal/",
	"title": "Admin Portal",
	"tags": [],
	"description": "",
	"content": " Section 1 Admin Portal In this section we will see how to setup and install the web portal in a VPS hosted in DigitalOcean.\n"
},
{
	"uri": "https://nearmev4.quanlabs.com/docs/en/admin-portal/requirements/",
	"title": "Requirements",
	"tags": [],
	"description": "",
	"content": "Nearme Admin portal was built with the MEAN Stack (Mongo + Express + Angular + Node). Also Parse Server (the open source version of Parse) is used to store and manage app data.\nThe backend requires a Linux server (we recommend Ubuntu) with Node.js (8+) and MongoDB.\n"
},
{
	"uri": "https://nearmev4.quanlabs.com/docs/en/mobile-app/requirements/",
	"title": "Requirements",
	"tags": [],
	"description": "",
	"content": "Ionic depends on Node.js, therefore we will start by going to the official Node.js website and download the corresponding binary to our operating system.\nHaving installed Node.js, we proceed to install Ionic with the following command:\nmycomputer@NearmeApp:~$ npm install -g ionic  Once installation is finished, using the command line terminal, navigate to the folder where the source code of the mobile app is located and execute the following:\nmycomputer@NearmeApp:~$ ionic serve  Wait a few seconds and you should see the application running in your web browser.\nIf you want to consult more details the official Ionic guide has all the necessary information.\n"
},
{
	"uri": "https://nearmev4.quanlabs.com/docs/en/mobile-app/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": " Global configuration Open the app.config.ts file located insrc/app and change the value of the following variables:\n SERVER_URL - It must match the declared value in Dockerfile.\n APP_ID - It must match the declared value in Dockerfile.\n GOOGLE_MAPS_API_KEY - You can use the same key generated during the admin portal configuration or create a new one from here.\n BANNER_ID - Optional. Leave it empty if you do not need to show Google advertising. Otherwise, go to AdMob portal, create a new app and create a new banner ID.\n TRACKING_ID - Google Analytics tracking ID. Optional. Leave it empty if you do not want to measure usage statistics.\n HEADER_COLOR - Color for the status bar (Android only). Optional. Any hexadecimal value is valid.\n DEFAULT_UNIT - Default distance unit. Possible values: km, mi.\n DEFAULT_LANG -Default language Possible values: en,es. If you want to add another language, create a new file in the src/assets/i18n folder. Then copy and paste the contents of the en.json file into the new file and edit the texts accordingly.\n  Update metadata Before publishing it is necessary to update the config.xml. Change the package ID and name as shown below:\n\u0026lt;widget id=\u0026quot;com.yourdomain.appname\u0026quot; version=\u0026quot;1.0.0\u0026quot;\u0026gt; \u0026lt;name\u0026gt;Your app name\u0026lt;/name\u0026gt; \u0026lt;/widget\u0026gt;  Setup push notifications Open config.xml and update the value of ParseServerUrl and ParseGcmSenderId.\nExample:\n\u0026lt;!-- Both values must match the Dockerfile --\u0026gt; \u0026lt;preference name=\u0026quot;ParseServerUrl\u0026quot; value=\u0026quot;https://nearme.quanlabs.com/parse/\u0026quot; /\u0026gt; \u0026lt;preference name=\u0026quot;ParseGcmSenderId\u0026quot; value=\u0026quot;XXXXXXXXXXX\u0026quot; /\u0026gt;  It is important that ParseServerUrl has the / character at the end, so that the notifications work correctly.\n Setup Facebook Login In config.xml edit APP_NAME and APP_ID as shown below:\n\u0026lt;plugin name=\u0026quot;cordova-plugin-facebook4\u0026quot; spec=\u0026quot;^2.1.0\u0026quot;\u0026gt; \u0026lt;variable name=\u0026quot;APP_ID\u0026quot; value=\u0026quot;YOUR_APP_ID\u0026quot; /\u0026gt; \u0026lt;variable name=\u0026quot;APP_NAME\u0026quot; value=\u0026quot;YOUR_APP_NAME\u0026quot; /\u0026gt; \u0026lt;variable name=\u0026quot;ANDROID_SDK_VERSION\u0026quot; value=\u0026quot;4.+\u0026quot; /\u0026gt; \u0026lt;/plugin\u0026gt;  For more information on how to generate these values visit the Ionic Native documentation.\nChange colors Changing colors is as easy as editing the color map $colors in variables.scss file.\n$colors: ( primary: #e91e63, secondary: #f4f4f4, danger: #f53d3d, light: #f4f4f4, accent: #ccc, dark: #7e7e7e, darker: #444, fb: #3b5998, );  To update the toolbar color edit the variables $gradient-bg and $secondary-bg in app.scss.\nUpdate Icon and SplashScreen Replace the files located in the /resources folder and in src/assets/img.\nFor more information about how to manage the resources please visit the Ionic Documentation.\n"
},
{
	"uri": "https://nearmev4.quanlabs.com/docs/en/mobile-app/",
	"title": "Mobile app",
	"tags": [],
	"description": "",
	"content": " Section 2 Mobile App In this section you will learn how to setup Nearme mobile app and how to create the IPA and APK files for Google Play and App Store.\n"
},
{
	"uri": "https://nearmev4.quanlabs.com/docs/en/release-notes/",
	"title": "Changelog",
	"tags": [],
	"description": "",
	"content": " Section 3 Changelog 4.0.0 (Jun, 2018) Mobile app\n New and better design! New home screen. New page with deals. Featured places. Added @ angular/animations. Added ionic-image-loader to save the images in cache. Added Google Maps JS SDK instead of native version. Updated dependencies and plugins. Updated Service Worker to improve PWA support. Support for push notifications. Support for Facebook Login. Support for iOS 11 and iPhone X. Support for Ionic 3.9.2 and Angular 5. Bug fixes.  Admin Portal\n New section to send notifications to users. New section to manage deals. Support for Parse Server 2.8.2. Code optimization. Bug fixes.  3.2.0 – 14/Jun/2017  Support for Ionic 3.3.0 and Lazy Loading. Added HeaderColor plugin to change status bar color (Android only). Added BrowserTab plugin to open external URLs. Missing translations were added. Bug fixes. Support for Parse Server 2.4.2 (CMS). Optimization in error handling in Parse Server and database. Support for New Relic (CMS). The use of REST API Key (CMS) was eliminated.  3.1.0 – 16/Mar/2017  Bug fixes in the map. Support for Ionic 2.2.0 and Angular 2.4.8. Update the CallNumber plugin Optimization of the Dockerfile. Favicon update. Minor correction in CSS styles.  3.0.0 – 17/Dec/2016  First release.  "
},
{
	"uri": "https://nearmev4.quanlabs.com/docs/en/admin-portal/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": " While it is possible to setup a server from scratch, we recommend Dokku to automate this process.\nIf you still aren\u0026rsquo;t familiar with Dokku, basically it\u0026rsquo;s an open source version of Heroku that can be installed on your own server that allows us to deploy our applications with Git.\nFortunately, DigitalOcean, one of the best providers of virtual machines, has an image based on Dokku, ready to be used after a few clicks.\nIn the next steps we will see how to setup the server with Dokku, install the web portal with Node.js and running MongoDB, add file persistence and even configure SSL without extra cost!\nCreat an account in DigitalOcean Go to the DigitalOcean and create a new account or use an existing account. If you wish you can use our referral link to obtain 10 USD of free credit.\nCreate Droplet Within your DigitalOcean account, click on the Create button and select the Droplets option to start the process of creating your new droplet. Then select the Dokku image as shown in the following video:\nAfter a couple of minutes we should have our server ready running with Dokku.\nIn the video above you will notice that the SSH key was already configured. In the opposite case you will have to add your own SSH key, which will be necessary to access to the server without passwords.\nIt is recommended to start with the most economic plan and with the data center closest to the location of your users. If the server load increases in the future you can increase the CPU, RAM and hard disk at any time through the DigitalOcean panel. It would also be a good idea to activate the backups when the application is in production.\n Configure Dokku Now on the page where the list of droplets appears, look for the newly created droplet and copy the server IP.\nOpen the IP in your web browser to finish the installation of Dokku.\nYou\u0026rsquo;ll see the SSH key that we configured when creating the droplet. In the Hostname field, enter the main domain of the app and activate the option Use virtualhost naming for apps. It should look something like this:\nPress Finish Setup. Now you can close this tab and continue with the next step.\nConfigure DNS Finally we have to add an A record in the DNS configuration of the desired domain to point to the IP of the droplet. This step varies depending on the provider you have hired to manage your domains. In this example we will make the configuration from cPanel.\n"
},
{
	"uri": "https://nearmev4.quanlabs.com/docs/en/admin-portal/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": " Now we will see how to install MongoDB, create and link the database with the web portal, and configure the file storage.\n Let\u0026rsquo;s start by access through SSH to the server. Considering that the server IP is 46.101.4.76, type ssh root@46.101.4.76 and press enter.\nInstall MongoDB Execute the following command to install MongoDB\nserver@root:~$ dokku plugin:install https://github.com/dokku/dokku-mongo.git mongo  Create database Execute the following command to create a database named nearmedb\nserver@root:~$ dokku mongo:create nearmedb  Create app Execute the following command to create an application named nearme\nserver@root:~$ dokku apps:create nearme  Link database with app server@root:~$ dokku mongo:link nearmedb nearme  Setup file storage Create a folder to store the uploaded files.\nserver@root:~$ mkdir -p /var/www/nearme/files  Now mount the newly created folder in our application.\nserver@root:~$ dokku storage:mount nearme /var/www/nearme/files:/app/files  By default, Dokku sets the upload limit to 2MB. Next we will install a plugin that will allow us to increase the limit to 20MB or to any desired value.\nserver@root:~$ dokku plugin:install https://github.com/Zeilenwerk/dokku-nginx-max-upload-size.git  server@root:~$ dokku config:set nearme MAX_UPLOAD_SIZE=20M  "
},
{
	"uri": "https://nearmev4.quanlabs.com/docs/en/admin-portal/deploying/",
	"title": "Deploying",
	"tags": [],
	"description": "",
	"content": " The previous instructions were executed on the server side. Now the following commands should be executed in your local machine where the admin portal source code is.\nConfigure Git repository Initialize a new repository.\nmycomputer@NearmeAdmin:~$ git init  Add all the files to the repository.\nmycomputer@NearmeAdmin:~$ git add .  Commit changes made to the repository.\nmycomputer@NearmeAdmin:~$ git commit -m \u0026quot;Added Nearme Admin Panel source code.\u0026quot;  Add a remote called dokku where the code will be pushed. Assuming that our IP is 46.101.4.76 and the app name is nearme, execute the following:\nmycomputer@NearmeAdmin:~$ git remote add dokku dokku@46.101.4.76:nearme  Setup Environment Variables Since Dokku is based on Docker, we will use the environment variables to setup the web portal before proceeding with the deployment.\nOpen the Dockerfile located at the root of the web portal code. In this file we have set all the environment variables that we can configure. At the moment the only required to install the web portal is SERVER_URL, which we should set to the URL that we configure in the DNS step. For example:\nENV SERVER_URL http://nearme.quanlabs.com  We will see later the other variables in more detail.\nSave the changes made to the Dockerfile and confirm the changes to the repository. Once again:\nmycomputer@NearmeAdmin:~$ git add .  Confirm changes made to the repository.\nmycomputer@NearmeAdmin:~$ git commit -m \u0026quot;Updated Dockerfile\u0026quot;  Now, we are ready to push the changes to the server.\nmycomputer@NearmeAdmin:~$ git push dokku master  Wait a few minutes and you should see a success message that the application has been successfully deployed.\nIf everything went well, open the server URL in your web browser (in our case http://nearme.quanlabs.com) and the login page should appear.\nFinally, open the installation page available in the path /install and fill out the form to create the admin user.\nThat is all! Next we will see how to configure some aspects to guarantee the correct functioning of the web portal.\nSetup Google Maps Now we need to create an API key in order to use Google Maps. We can generate this key in a couple of minutes following this guide.\nHaving the key ready, open the Dockerfile and update the variable GOOGLE_MAPS_API_KEY.\nENV GOOGLE_MAPS_API_KEY AIzaXXXXXXXXXXXXXXXXXXXXXXXXXXX  Setup Mailgun Mailgun allows us to send emails through a flexible API and without the need to install extra software on our server.\nIt is necessary to configure Mailgun so that the password recovery function via email works correctly.\nFirst go to the Mailgun and create a new account.\nIn the admin panel add a new domain. It is recommended to use the same domain of the app. After adding the domain you will have to verify it. Follow the steps described in the Mailgun portal.\nThen in the details of the domain you will find the API Key. Open the Dockerfile and update the Mailgun variables. Example:\nENV MAILGUN_API_KEY key-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX ENV MAILGUN_DOMAIN quanlabs.com ENV MAILGUN_FROM_ADDRESS 'QuanLabs \u0026lt;dev@quanlabs.com\u0026gt;' ENV MAILGUN_TO_ADDRESS 'dev@quanlabs.com'  Setup push notifications In the web portal we have the ability to send push notifications to users. For this to work on Android devices we must first generate the Sender ID and the API Key in Firebase Console. For iOS devices, we must generate the certificates in Apple Developer Portal.\nSetup notifications for Android  In your web browser, visit the Firebase console and sign in with your Google account. Create a new project. Click on the gear icon in the upper left and select the option Project Settings. Click on the Cloud Messaging tab. Copy the Legacy Server Key and the Sender ID. Open the Dockerfile and update the variables PUSH_ANDROID_SENDER_ID andPUSH_ANDROID_API_KEY. Example:  ENV PUSH_ANDROID_SENDER_ID XXXXXXXXXXX ENV PUSH_ANDROID_API_KEY AIzaXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  Setup iOS notifications To follow the steps below it is necessary to have an Apple developer account and a Mac. If we meet these requirements we have to do the following from the developer portal:\n Create a new App ID with the notification service enabled. Create the notification certificate in development and production mode. Download and install the certificates on your computer. Export the certificates to P12 format. Copy the .P12 certificates to the /push folder located in admin portal source code.  \nYou can click on the image to see the full video.\nWhen creating the App ID it\u0026rsquo;s important to select the option with the explicit suffix. Also it\u0026rsquo;s recommended to set this ID with our domain in reverse order. For example in our case it would be com.quanlabs.nearme\n Open the Dockerfile and update the variable PUSH_IOS_BUNDLE_ID with the same App ID that we configured in the Apple portal.\nENV PUSH_IOS_BUNDLE_ID com.quanlabs.nearme  Configure SSL with Let\u0026rsquo;s Encrypt (Optional) This step is optional but it is worth it doing it to ensure that communications between the server and the mobile application are encrypted.\nFirst we enter via SSH to the server and execute the following to install the Let\u0026rsquo;s Encrypt plugin.\nserver@root:~$ dokku plugin:install https://github.com/dokku/dokku-letsencrypt.git  Encript the app.\nserver@root:~$ dokku letsencrypt nearme  And finally open the Dockerfile and adjust the value of the variable SERVER_URL tohttps\nENV SERVER_URL https://nearme.quanlabs.com  Every time we make a change in the source code (Ex .: Modify the Dockerfile) we have to push the code to reflect the changes in the server as follows: add the files to the repository, confirm the changes and finally push them with the command git push\n "
},
{
	"uri": "https://nearmev4.quanlabs.com/docs/en/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://nearmev4.quanlabs.com/docs/en/mobile-app/deploying/",
	"title": "Deploying",
	"tags": [],
	"description": "",
	"content": "Previously we executed ionic serve to run the mobile app in a web browser and make the necessary modifications. The next step is to create the binaries on production mode.\nMake sure you install the necessary dependencies to create the native binaries for each platform. More information here.\n mycomputer@NearmeApp:~$ ionic cordova build android --prod --release  mycomputer@NearmeApp:~$ ionic cordova build ios --prod --release  These commands will create an optimized and suitable compilation for Google Play and App Store, respectively.\nAndroid requires that all APKs be digitally signed with a certificate before they can be installed.\nVisit this Ionic guide to learn how to generate your private key and use it to sign the APK.\nWhen executing the command above to build for iOS it may have generated an error related to code signing. This can be solved by creating the provisioning profiles. Do the following to create and sign the compilation:\n Create the provisioning profiles on development and production mode in the Apple Developer Portal. Install both profiles on your computer. Open .xcodeproj located on the folder platforms/ios. On the option Signing (Debug) select the development profile and in Signing (Release) the production profile. Re-run ionic cordova build ios --prod --release to build and sign the code correctly.  Don´t forget to activate push notifications in xCode. Simply go to the project editor for your target and then click on the Capabilities tab. Look for Push Notifications and toggle its value to ON.\n If you have any suggestions or questions related to this documentation do not hesitate to contact us.\n"
},
{
	"uri": "https://nearmev4.quanlabs.com/docs/en/",
	"title": "Nearme. Ionic 2/3 Starter for Location Based Apps",
	"tags": [],
	"description": "",
	"content": " Nearme Nearme is a starter designed for Ionic, a framework that allows us to develop apps for multiple platforms with a single base code.\nThe main objective of Nearme is to offer to developers and entrepreneurs a solid and strong code base to launch a product based on the geolocation of mobile devices. During development we implemented good JavaScript practices using the ES6 standard, making use of concepts such as inheritance, abstract classes and asynchronous functions.\nNearme includes a web panel to manage places, categories, users, reviews, deals and images. This administration system was developed with Node.js, Express, Parse Server and MongoDB.\nMain Features  Nearby, featured and most recent places. Nearby places via Google Maps. Filter places by Category. View Deals. Actions like call to place, directions by map and open external website. Publish and view reviews. Add places. Image slider. User authentication. Login by Facebook. Password recovery. Multi-language PWA support. Monetization with AdMob. Integration with Google Analytics. Push notifications.  In the next section you will learn how to setup nearme from zero to deploy:\n Install and configure the web panel from scratch. Run the mobile application in your local environment. Connect the mobile application with the web portal. Configure and customize the mobile application. Create the binaries on production mode to publish your own version on the App Store and Google Play.  "
},
{
	"uri": "https://nearmev4.quanlabs.com/docs/en/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]