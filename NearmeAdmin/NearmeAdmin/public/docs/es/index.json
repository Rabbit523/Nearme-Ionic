[
{
	"uri": "https://nearmev4.quanlabs.com/docs/es/admin-portal/",
	"title": "Portal de administración",
	"tags": [],
	"description": "",
	"content": " Sección 1 Portal de administración En esta sección veremos cómo instalar el portal web para administrar la información de lugares, categorías, promociones, usuarios, notificationes y reseñas.\n"
},
{
	"uri": "https://nearmev4.quanlabs.com/docs/es/admin-portal/requirements/",
	"title": "Requerimientos",
	"tags": [],
	"description": "",
	"content": "El portal de administración está desarrollado bajo el stack MEAN (Mongo + Express + Angular + Node). También integra Parse Server (la versión open source de Parse) para facilitar la persistencia y transferencia de datos.\nEl backend requiere un servidor Linux (recomendamos Ubuntu) con Node.js (8+) y MongoDB.\n"
},
{
	"uri": "https://nearmev4.quanlabs.com/docs/es/mobile-app/requirements/",
	"title": "Requerimientos",
	"tags": [],
	"description": "",
	"content": "Ionic depende de Node.js para funcionar correctamente, por lo tanto empezaremos visitando la página oficial de Node.js y descargaremos el binario correspondiente a nuestro sistema operativo.\nTeniendo instalado Node.js, procedemos a instalar Ionic con el siguiente comando:\nnpm install -g ionic  Esperamos a que termine la instalación. Una vez finalizado, usando la terminal de línea de comandos navegamos hacia la carpeta donde se encuentra el código fuente de la aplicación móvil y ejecutamos lo siguiente:\nionic serve  Este comando creará un compilado funcional para entornos web. Espera unos segundos y deberás ver la aplicación corriendo en tu navegador web.\nSi quieres consultar más detalles la guía oficial de Ionic cuenta con toda la información necesaria.\n"
},
{
	"uri": "https://nearmev4.quanlabs.com/docs/es/mobile-app/",
	"title": "Aplicación móvil",
	"tags": [],
	"description": "",
	"content": " Sección 2 Aplicación móvil En esta sección veremos cómo instalar y configurar Nearme. Al final mostraremos cómo crear los archivos IPA y APK en modo producción para Google Play y App Store.\n"
},
{
	"uri": "https://nearmev4.quanlabs.com/docs/es/mobile-app/configuration/",
	"title": "Configuración",
	"tags": [],
	"description": "",
	"content": " Configuración global Abre el archivo app.config.ts localizado en src/app y ajusta el valor de las siguientes variables:\n SERVER_URL - La URL del servidor. Debe coincidir con el valor declarado en el Dockerfile.\n APP_ID - El ID de la aplicación. Debe coincidir con el valor declarado en el Dockerfile.\n GOOGLE_MAPS_API_KEY - La llave para la API de Google Maps. Requerida para que el mapa funcione correctamente. Puedes usar la misma llave generada durante la configuración del portal web ó crear una nueva desde aquí.\n BANNER_ID - ID del banner de AdMob. Opcional. Dejalo vacío si no necesitas mostrar publicidad de Google. En caso contrario ve al portal de AdMob, crea una nueva app y crea un nuevo ID para el banner.\n TRACKING_ID - Código de seguimiento de Google Analytics. Opcional. Dejalo vacío si no deseas medir las estadísticas de uso.\n HEADER_COLOR - Color para el status bar (sólo Android). Opcional. Cualquier valor hexadecimal es válido.\n DEFAULT_UNIT - Unidad de distancia predeterminada. Valores posibles: km, mi.\n DEFAULT_LANG - Lenguaje predeterminado. Valores posibles: en, es. Si deseas agregar otro lenguaje crea un nuevo archivo en la carpeta src/assets/i18n. Luego copia y pega el contenido del archivo en.json dentro del nuevo archivo y edita los textos libremente.\n  Ajustar metadatos Antes de publicar nuestra aplicación en las tiendas es necesario actualizar algunos datos declarados en el config.xml. Actualiza el ID del paquete y el nombre cómo se muestra a continuación.\n\u0026lt;widget id=\u0026quot;com.yourdomain.appname\u0026quot; version=\u0026quot;1.0.0\u0026quot;\u0026gt; \u0026lt;name\u0026gt;Nombre de tu app\u0026lt;/name\u0026gt; \u0026lt;/widget\u0026gt;  Actualiza también la información que se encuentra dentro de la etiqueta \u0026lt;/author\u0026gt;.\nConfigurar Notificaciones Push Abre el archivo config.xml y actualiza el valor de ParseServerUrl y ParseGcmSenderId.\nEjemplo:\n\u0026lt;!-- Ambos valores deben coincidir con el Dockerfile --\u0026gt; \u0026lt;preference name=\u0026quot;ParseServerUrl\u0026quot; value=\u0026quot;https://nearme.quanlabs.com/parse/\u0026quot; /\u0026gt; \u0026lt;preference name=\u0026quot;ParseGcmSenderId\u0026quot; value=\u0026quot;XXXXXXXXXXX\u0026quot; /\u0026gt;  Es importante que la URL tenga al final el caracter / para que las notificaciones funcionen correctamente.\n Configurar Facebook Login En el mismo config.xml edita las variables APP_NAME y APP_ID del plugin de Facebook.\n\u0026lt;plugin name=\u0026quot;cordova-plugin-facebook4\u0026quot; spec=\u0026quot;^2.1.0\u0026quot;\u0026gt; \u0026lt;variable name=\u0026quot;APP_ID\u0026quot; value=\u0026quot;YOUR_APP_ID\u0026quot; /\u0026gt; \u0026lt;variable name=\u0026quot;APP_NAME\u0026quot; value=\u0026quot;YOUR_APP_NAME\u0026quot; /\u0026gt; \u0026lt;variable name=\u0026quot;ANDROID_SDK_VERSION\u0026quot; value=\u0026quot;4.+\u0026quot; /\u0026gt; \u0026lt;/plugin\u0026gt;  Para más información sobre cómo generar estos valores visita la documentación del plugin en Ionic Native.\nPersonalizar colores Cambiar los colores es tan fácil como editar el mapa de colores $colors en el archivo variables.scss.\n$colors: ( primary: #e91e63, secondary: #f4f4f4, danger: #f53d3d, light: #f4f4f4, accent: #ccc, dark: #7e7e7e, darker: #444, fb: #3b5998, );  Para ajustar el color del toolbar edita las variables $gradient-bg y $secondary-bg dentro del app.scss.\nActualizar Icono y SplashScreen Reemplaza los archivos localizados en la carpeta /resources y en src/assets/img.\nPara más información consulta la documentación oficial de Ionic.\n"
},
{
	"uri": "https://nearmev4.quanlabs.com/docs/es/release-notes/",
	"title": "Changelog",
	"tags": [],
	"description": "",
	"content": " Sección 3 Changelog 4.0.0 (Jun, 2018) Aplicación móvil\n ¡Nuevo y mejor diseño! Nueva pantalla de inicio con carrusel de imágenes. Nueva página con un listado de promociones. Lugares destacados. Integración de @angular/animations para añadir efectos y animaciones a los listados. Integración de ionic-image-loader para guardar las imágenes en cache. Actualización de Google Maps de la versión nativa por la versión de JavaScript. Actualización de dependencias y plugins. Actualización del Service Worker para mejorar el soporte de PWA. Soporte para notificaciones push. Soporte para Facebook Login. Soporte para iOS 11 y iPhone X. Soporte para Ionic 3.9.2 y Angular 5. Correción de errores.  Portal web\n Nueva sección para enviar notificaciones a los usuarios. Nueva sección para administrar promociones. Nueva sección para Soporte para Parse Server 2.8.2. Optimización de código. Corrección de errores.  3.2.0 – 14/Jun/2017  Soporte para Ionic 3.3.0 y Lazy Loading. Integración del plugin HeaderColor para cambiar el color del status bar (sólo Android). Integración del plugin BrowserTab para abrir URL externas. Se añadieron traducciones. Corrección en la subida de la imagen de perfil. Corrección de errores. Soporte para Parse Server 2.4.2 (CMS). Optimización en el manejo de errores en Parse Server y base de datos. Soporte para New Relic (CMS) Se eliminó el uso del REST API Key (CMS)  3.1.0 – 16/Mar/2017  Correción de errores en el mapa. Soporte para Ionic 2.2.0 y Angular 2.4.8. Actualización del plugin CallNumber Optimización del Dockerfile. Actualización del Favicon. Corrección menor en los estilos CSS.  3.0.0 – 17/Dec/2016  Primera versión  "
},
{
	"uri": "https://nearmev4.quanlabs.com/docs/es/admin-portal/installation/",
	"title": "Instalación",
	"tags": [],
	"description": "",
	"content": " Si bien es posible levantar un servidor desde cero, nosotros recomendamos Dokku para automatizar este proceso.\nSí aún no conoces Dokku, básicamente se trata de un Heroku de código abierto que puede ser instalado en un servidor propio y que nos permite desplegar nuestras aplicaciones con el flujo de trabajo de Git.\nAfortunadamente, DigitalOcean, uno de los mejores proveedores de máquinas virtuales, cuenta con una imagen basada en Dokku, lista para ser usada después de unos cuantos clics.\nEn los siguientes pasos veremos cómo levantar el servidor con Dokku, instalar el portal web con Node.js y MongoDB corriendo, agregar persistencia de archivos y hasta configurar SSL sin costo extra!\nCrear cuenta en DigitalOcean Ve al sitio web de DigitalOcean y crea una nueva cuenta ó usa una existente. Si lo deseas puedes usar nuestro enlace de referidos para obtener 10 USD de crédito gratis.\nCrear Droplet Dentro de tu cuenta de DigitalOcean, haz click en el botón Create y selecciona la opción Droplets para empezar el proceso de creación de tu nuevo droplet. Luego selecciona la imagen de Dokku cómo se muestra en el siguiente video:\nDespués de un par de minutos ya debemos tener nuestro servidor listo corriendo con Dokku.\nEn el video de arriba observarás que la llave SSH ya estaba configurada. En el caso contrario tendrás que añadir tú propia llave SSH, la cuál será necesaria para ingresar y desplegar el portal web sin necesidad de contraseñas.\nEs recomendable empezar con el plan más económico y con el data center más cercano a la ubicación de tus usuarios. Si la carga del servidor aumenta en un futuro puedes aumentar el CPU, RAM y disco duro en cualquier momento a través del panel de DigitalOcean. También sería buena idea activar los respaldos cuándo la aplicación esté en producción.\n Configurar Dokku Ahora en la página donde aparece la lista de droplets busca el droplet recién creado y copia la IP del servidor.\nAbre la IP en tú navegador web para terminar la instalación de Dokku.\nDebe aparecer la llave SSH que configuramos al momento de crear el droplet. En el campo Hostname introduce el dominio principal de la app y activa la opción Use virtualhost naming for apps. Debería quedar algo así:\nPresiona Finish Setup y a continuación nos redireccionará a la documentación oficial de Dokku. Ya puedes cerrar esta pestaña y continuar con el siguiente paso.\nConfigurar DNS Por último tenemos que agregar un registro A en la configuración DNS del dominio deseado para que apunte a la IP del droplet. Este paso varía dependiendo del proveedor que tengas contratado para gestionar tus dominios. En este ejemplo haremos la configuración desde cPanel.\n"
},
{
	"uri": "https://nearmev4.quanlabs.com/docs/es/admin-portal/configuration/",
	"title": "Configuración",
	"tags": [],
	"description": "",
	"content": " En esta sección veremos cómo instalar MongoDB, crear y vincular la base de datos con la aplicación, y configurar el almacenamiento y subida de archivos.\nPara empezar tenemos que entrar por SSH al servidor. Considerando que la IP del servidor es 46.101.4.76 ejecutamos la terminal de comandos de nuestro sistema operativo, tecleamos ssh root@46.101.4.76 y presionamos enter.\nInstalar MongoDB Ejecuta el siguiente comando para instalar MongoDB\nserver@root:~$ dokku plugin:install https://github.com/dokku/dokku-mongo.git mongo  Crear la base de datos Ejecuta el siguiente comando para crear una base de datos llamada nearmedb\nserver@root:~$ dokku mongo:create nearmedb  Crear la aplicación Ejecuta el siguiente comando para crear una aplicación llamada nearme\nserver@root:~$ dokku apps:create nearme  Vincular la base de datos con la aplicación server@root:~$ dokku mongo:link nearmedb nearme  Configurar persistencia y subida de archivos Crea una carpeta para almacenar los archivos cargados en el portal web y aplicación móvil.\nserver@root:~$ mkdir -p /var/www/nearme/files  Ahora montamos la carpeta recién creada en nuestra aplicación.\nserver@root:~$ dokku storage:mount nearme /var/www/nearme/files:/app/files  De forma predeterminada, Dokku establece el límite de subida a 2MB. A continuación instalaremos un plugin que nos permitirá aumentar el límite a 20MB ó a cualquier valor deseado.\nserver@root:~$ dokku plugin:install https://github.com/Zeilenwerk/dokku-nginx-max-upload-size.git  server@root:~$ dokku config:set nearme MAX_UPLOAD_SIZE=20M  "
},
{
	"uri": "https://nearmev4.quanlabs.com/docs/es/admin-portal/deploying/",
	"title": "Liberación",
	"tags": [],
	"description": "",
	"content": " Las instrucciones de la sección Configuración se ejecutaron del lado del servidor. Los siguientes comandos deberán ejecutarse en la carpeta del código fuente del portal web.\nConfigurar repositorio Git Inicializa un nuevo repositorio.\nmycomputer@NearmeAdmin:~$ git init  Añade todos los archivos al repositorio.\nmycomputer@NearmeAdmin:~$ git add .  Confirma los cambios hechos al repositorio.\nmycomputer@NearmeAdmin:~$ git commit -m \u0026quot;Se añadió el código fuente del portal web de Nearme\u0026quot;  Añade un remoto llamado dokku donde el código será empujado.\nmycomputer@NearmeAdmin:~$ git remote add dokku dokku@46.101.4.76:nearme  Configurar variables de entorno Dado que Dokku funciona sobre Docker, aprovecharemos las variables de entorno para configurar aspectos importantes del portal web antes de proceder con la liberación del código.\nAbre el Dockerfile localizado en la raíz del código del portal web. En este archivo hemos declarado todas las variables entornos que podemos configurar. Por el momento la única necesaria para instalar el portal web es SERVER_URL, la cuál tenemos que establecerla con la URL qué configuramos en el paso de las DNS. En nuestro quedaría así:\nENV SERVER_URL http://nearme.quanlabs.com  Luego veremos con más detalle las demás variables.\nGuarda los cambios hechos al Dockerfile y confirma los cambios al repositorio. Una vez más:\nmycomputer@NearmeAdmin:~$ git add .  Confirma los cambios hechos al repositorio.\nmycomputer@NearmeAdmin:~$ git commit -m \u0026quot;Se actualizó la variable SERVER_URL en el Dockerfile\u0026quot;  Ahora sí, ya tenemos todo listo para empujar los cambios al servidor.\nmycomputer@NearmeAdmin:~$ git push dokku master  Esperamos unos minutos y al final debemos ver un mensaje de éxito de que la aplicación ha sido liberada correctamente.\nSi todo salió bien, entrando a la URL del portal web (en nuestro caso http://nearme.quanlabs.com) debemos ver la pantalla de inicio de sesión.\nPara terminar abre la página de instalación disponible en la ruta /install y llena el formulario para crear el usuario administrador.\nEso es todo! A continuación veremos cómo configurar algunos aspectos para garantizar el correcto funcionamiento del portal web.\nConfigurar la API Key de Google Maps Google Maps requiere que cualquier llamada a su API cuente con una llave. Esta llave la podemos generar en un par de minutos siguiendo la guía disponible en el portal de desarrolladores de Google.\nTeniendo la llave lista, abre el Dockerfile y actualiza la variable GOOGLE_MAPS_API_KEY.\nENV GOOGLE_MAPS_API_KEY AIzaXXXXXXXXXXXXXXXXXXXXXXXXXXX  Configurar Mailgun Mailgun nos permite enviar correos a través de una API flexible y sin la necesidad de instalar software extra en el servidor.\nEs necesario configurar Mailgun para que la función de recuperación de contraseña vía correo electrónico funcione correctamente.\nPrimero entra a la página web de Mailgun y crea una nueva cuenta.\nEn el panel de administración agrega un nuevo dominio. Es recomendable usar el mismo dominio de la app. Después de agregar el dominio tendrás que verificar el dominio. Sigue los pasos descritos en el portal de Mailgun.\nLuego en los detalles del dominio encontrarás la API Key. Abre el Dockerfile y actualiza las variables de Mailgun. Ejemplo:\nENV MAILGUN_API_KEY key-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX ENV MAILGUN_DOMAIN quanlabs.com ENV MAILGUN_FROM_ADDRESS 'QuanLabs \u0026lt;dev@quanlabs.com\u0026gt;' ENV MAILGUN_TO_ADDRESS 'dev@quanlabs.com'  Configurar Notificationes Push En el portal web tenemos la posibilidad de enviar notificaciones push a los usuarios. Para que esto funcione en dispositivos con Android primero debemos primero generar el Sender ID y el API Key desde la consola para desarrolladores de Firebase. En el caso de dispositivos con iOS debemos generar los certificados desde nuestra cuenta de desarrolladores de Apple.\nActivar notificaciones para Android  En tu navegador web visita la consola de Firebase e inicia sesión con tu cuenta de Google. Crea un nuevo proyecto. Haz click en el ícono del engrane que se encuentra en la parte superior izquierda y selecciona la opción Project Settings Haz click en la pestaña Cloud Messaging Copia el Legacy Server Key y el Sender ID Abre el Dockerfile y actualiza las variables PUSH_ANDROID_SENDER_ID y PUSH_ANDROID_API_KEY  Ejemplo:\nENV PUSH_ANDROID_SENDER_ID XXXXXXXXXXX ENV PUSH_ANDROID_API_KEY AIzaXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX  Activar notificaciones para iOS Para seguir los pasos a continuación es necesario contar con una cuenta de desarrollador de Apple y una Mac. Si cumplimos estos requisitos tenemos que hacer lo siguiente desde el portal de desarolladores:\n Crear un nuevo App ID con el servicio de notificaciones habilitado. Crear el certificado de notificaciones en modo de desarrollo y producción. Descargar e instalar los certificados en tu ordenador. Exportar los certificados a formato P12. Copiar los certificados .P12 a la carpeta /push localizada en el código fuente del portal web.   Haz click sobre la imagen para ver el video completo.\nAl momento de crear el App ID es importante seleccionar la opción con el sufijo explícito. Es recomendable establecer este ID con nuestro dominio en forma inversa. Por ejemplo en nuestro caso quedaría así com.quanlabs.nearme\n Abre el Dockerfile y actualiza la variable PUSH_IOS_BUNDLE_ID con el mismo App ID que configuramos en el portal de Apple.\nENV PUSH_IOS_BUNDLE_ID com.quanlabs.nearme  Configurar SSL con Let\u0026rsquo;s Encrypt (Opcional) Este paso es opcional pero vale la pena hacerlo para garantizar que las comunicaciones entre el servidor y la aplicación móvil sean encriptadas.\nPrimero entramos vía SSH al servidor y ejecutamos lo siguiente para instalar el plugin de Let\u0026rsquo;s Encrypt.\nserver@root:~$ dokku plugin:install https://github.com/dokku/dokku-letsencrypt.git  Encriptar la app.\nserver@root:~$ dokku letsencrypt nearme  Y por último abre el Dockerfile y ajusta el valor de la variable SERVER_URL a https\nENV SERVER_URL https://nearme.quanlabs.com  Cada vez que hagamos algún cambio en el código fuente del portal web (Ej.: Modificar el Dockerfile) tenemos que hacer el flujo de Git para reflejar los cambios en el servidor: añadir los archivos al repositorio, confirmar los cambios y finalmente empujarlos con el comando git push\n "
},
{
	"uri": "https://nearmev4.quanlabs.com/docs/es/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://nearmev4.quanlabs.com/docs/es/mobile-app/deploying/",
	"title": "Liberación",
	"tags": [],
	"description": "",
	"content": "Anteriormente ejecutamos ionic serve para correr la aplicación móvil en un navegador web y hacer las modificaciones necesarias. El siguiente paso es crear los binarios en modo producción.\nAsegúrate de instalar las dependencias necesarias para crear los binarios nativos para cada plataforma. Más información aquí.\n ionic cordova build android --prod --release  ionic cordova build ios --prod --release  Estos comandos crearán una compilación optimizada y adecuada para Google Play y App Store, respectivamente.\nGoogle Play requiere que nuestra aplicación tenga nuestra firma, en caso contrario no nos permitirá subir el APK en el portal de desarrolladores. En la guía de Ionic puedes ver cómo generar tu llave privada y usar la misma para firmar el APK.\nAl ejecutar el comando para crear el compilado de iOS posiblemente haya generado un error relacionado con la firma del código. Esto se puede solucionar creando los perfiles de provisionamiento. Haz lo siguiente para crear y firmar el compilado:\n Crea los perfiles de provisionamiento en modo desarrollo y producción en el portal de desarrolladores de Apple. Instala ambos perfiles en tu computadora. Abre el archivo .xcodeproj ubicado en la carpeta platforms/ios. En la opción Signing (Debug) selecciona el perfil de desarrollo y en Signing (Release) el perfil de producción. Vuelve a ejecutar ionic cordova build ios --prod --release para firmar el código correctamente.  No olvides activar la opción Push Notifications en la pestaña Capabilities de xCode.\n Si tienes alguna sugerencia o pregunta relacionada con la documentación no dudes en contactarnos.\n"
},
{
	"uri": "https://nearmev4.quanlabs.com/docs/es/",
	"title": "Nearme. Ionic 2/3 Starter for Location Based Apps",
	"tags": [],
	"description": "",
	"content": " Nearme Nearme es una plantilla diseñada para Ionic, un marco de trabajo (framework) qué nos permite desarrollar apps para múltiples plataformas con un único código base.\nEl objetivo principal de Nearme es ofrecer a desarrolladores y emprendedores una base sólida y robusta para lanzar un producto basado en la geolocalización de los dispositivos móviles, e implementar buenas prácticas de JavaScript usando el estándar ES6. El código fuente hace uso de conceptos cómo herencia, clases abstractas y funciones asíncronas.\nNearme incluye un panel web para administrar la información de los lugares, categorías, usuarios, reseñas, promociones e imágenes. Este sistema de administración fue desarrollado con Node.js, Express, Parse Server y MongoDB.\nFunciones principales  Lista de lugares cercanos, destacados y más recientes. Ver lugares cercanos vía Google Maps. Lista de categorías. Lista de promociones. Acciones para llamar al lugar, direcciones por mapa y visitar sitio web. Publicar y ver reseñas. Añadir lugares. Carrusel de imágenes. Autenticación de usuarios. Inicio de sesión por Facebook. Recuperación de contraseña. Multi-lenguaje. Soporte PWA. Monetización con AdMob. Integración con Google Analytics. Notificaciones Push.  Sigue esta documentación paso a paso para llevar a cabo lo siguiente:\n Instalar y configurar el panel web desde cero. Ejecutar la aplicación móvil en tu entorno local. Conectar la aplicación móvil con el portal web. Configurar y personalizar la aplicación móvil. Crear los binarios en modo producción para publicar tu propia versión en las tiendas de Apple y Google.  "
},
{
	"uri": "https://nearmev4.quanlabs.com/docs/es/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]